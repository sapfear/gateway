Производит обмен данными между базой данных MongoDB и ModBus регистрами ПЛК.
Файл client_modbus.js содержит в себе всю логику работы обмена.
Значимые технические моменты:
	1) Предварительно инициализируется таблица регистров, считываемая из файла /config/regs_4.csv, при удачном считывании запускается подключение к БД в функции mongoConnect
	2) Работа программы начинается с функции modbus_up, в которую передается IP адрес и порт ПЛК для соединения.
	Внутри этой функции запускается процесс соединения с ПЛК, производится инициализация регистров ПЛК через функцию mosbus_init и передается управление
	в основной цикл конечного автомата, исполняющегося в main_loop через таймауты длительностью MAIN_LOOP_TIMEOUT.
	3) Основной цикл main_loop на каждой итерации проверяет доступность базы и ПЛК (флаги modbus_client_online_status и mongo_client_online_status), при рабочем соединении
	последовательно проверяет следующие ступени работы:
		3.1) find_auth - поиск тэгов для авторизации и запись результата предыдущей авторизации
		3.2) boot_notification_state - процесс инициализации зарядной станции в сети OCPP
		3.3) heartbeat_state
		3.4) meter_values - запись текущих метрик потребления в базу
		3.5) find_start - поиск событий старта зарядки в ПЛК и запись результата
		3.6) status_notif - поиск и запись событий зарядного коннектора
		3.7) find_stop - поиск событий остановки зарядки в ПЛК и запись результата
		3.8) reserve_state - резервация коннекторов. Происходит в 2 этапа - данные со статусом ReceivedFromOCPP записываются в ПЛК и переводятся в статус TransmittedToModbus
		события со статусом TransmittedToModbus с истекшим сроком переводятся в статус ExpiredToModbus и флаги регистров в ПЛК снимаются.
		3.9) availability_state - передача из центральной системы запросов доступности коннекторов
		3.10) lock_state - передача из центральной системы запросов блокировки коннектора
		3.11) stop_requests - передача запроса остановки зарядки из центральной системы. Происходит в 2 этапа - данные со статусом ReceivedFromOCPP записываются в ПЛК и 
		переводятся в статус TransmittedToModbus. При статусе TransmittedToModbus проверяется принятие ПЛК этих данных и перевод в статус ReceivedFromModbus.
		3.12) start_requests - передача запроса старта зарядки из центральной системы. Аналогично 3.11
		
	4) Все данные в БД могут находится в состояниях ReceivedFromModbus -> TransmittedToOCPP -> ReceivedFromOCPP -> TransmittedToModbus.
	Либо ReceivedFromOCPP -> TransmittedToModbus -> ReceivedFromModbus -> TransmittedToOCPP.
	Состояние FieldsError говорит о неверных данных и невозможности их обработки. Например отсутствует номер коннектора или TAG_ID.

1. Настройка скпритов.
 - скрипт client_modbus.js (перекачивалка данных из модбас в базу)
 переменная debug (16 строка) управляет, включить ли обращение в модбас устройство по адресу debug_addr или ожидать udp пакета.
 переменная mongo_url - адрес базы данных и ее название. ("mongodb://localhost:27017/" + "test_2")
 REGISTER_READ_OFFSET - смещение для чтения регистров (по умолчанию с 0)
 REGISTER_WRITE_OFFSET - смещение записи регистров
 в режиме debug = true чтение идет из Holding регистров. строка 197 управляет выборов функции чтения.
 
 - скрипт client_ocpp.js (скрипт запуска ocpp клиента)
 server_url = 'http://localhost:9000/' - адрес OCPP сервера + порт
 identifier - название точки заряда
 
 - скрипт plugin/cp.js (основной скрипт клиента)
 переменная self.mongo_url - адрес базы данных и ее название. ("mongodb://localhost:27017/" + "test_2")
 
 - скрипт db_check.js (монитор базы данных, при запуске показывает текущеее содержимое бд и завершает работу)
 url = "mongodb://localhost:27017/test_2"; - адрес базы данных и ее название. 
 
 - скрипт sim.js - симулятор сервера OCPP, настройки не требует.
 
2. Запуск скриптов
	Все скрипты запускаются командой. Окно консоли с запущенной командой оставить открытым.
	node <script_name>.js
	
	node client_ocpp.js
	node client_modbus.js
	node db_check.js
	node sim.js - предложит запуск симулятора. запуск зарядной точки осуществляется командой start_cs 9000 (переменная - порт)
	
	
3. Тестирование
	Для работы скриптов нужна запущенная БД (обычно командой "mongod"). При отсутсвии работающей базы скрипты входят в цикл ожидания соединения с ней. 
	В этом режиме client_ocpp будет отвечать Rejected на команды центральной системы.
	
	Для тестирования модбаса локально есть файл настройки test.ananas для заполнения регистров в симуляторе Ananas.
	
	Для запуска команд со стороны центральной системы нужно ввести в окно sim.js команду в формате
	remote_<команда>
	
	remote_unlockconnector
	remote_changeavailability
	remote_clearcache
	remote_starttransaction
	remote_stoptransaction
	remote_cancelreservation
	remote_datatransfer
	remote_getconfiguration
	remote_getlocallistversion
	remote_reservenow
	remote_sendlocallist
	
	команды отправляются с предзаполненными полями.
	
